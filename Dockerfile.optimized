FROM python:3.12-slim AS base

# set version label
ARG BUILD_DATE
ARG VERSION
LABEL build_version="Apprise API version:- ${VERSION} Build-date:- ${BUILD_DATE}"
LABEL maintainer="Chris-Caron"

# set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV APPRISE_CONFIG_DIR=/config
ENV APPRISE_ATTACH_DIR=/attach
ENV APPRISE_PLUGIN_PATHS=/plugin

# Build stage - contains build tools and dependencies
FROM base AS builder

# Install build dependencies
RUN apt-get update -qq && \
    apt-get install -y -qq --no-install-recommends \
        build-essential \
        curl \
        git \
        && rm -rf /var/lib/apt/lists/*

# Install Python dependencies in a virtual environment
COPY ./requirements.txt /tmp/requirements.txt
RUN python -m venv /opt/venv && \
    /opt/venv/bin/pip install --no-cache-dir --upgrade pip && \
    /opt/venv/bin/pip install --no-cache-dir -r /tmp/requirements.txt gunicorn supervisor

# Copy application code for any build steps if needed
COPY apprise_api/ /tmp/webapp/

# For distroless API-only, remove UI components in builder stage
RUN rm -rf /tmp/webapp/static/ \
           /tmp/webapp/api/templates/ \
           /tmp/webapp/etc/nginx.conf \
           /tmp/webapp/etc/supervisord.conf || true

# Nginx build stage
FROM nginx:alpine AS nginx-stage
COPY apprise_api/static /usr/share/nginx/html/s/
COPY apprise_api/etc/nginx.conf /etc/nginx/nginx.conf

# Final runtime stage - distroless for maximum security and minimal size
FROM gcr.io/distroless/python3:nonroot AS runtime-distroless

# Copy Python virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application (but remove UI components since no nginx in distroless)
COPY --from=builder /tmp/webapp /opt/apprise/webapp/

# Make sure to use venv
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV APPRISE_CONFIG_DIR=/config
ENV APPRISE_ATTACH_DIR=/attach
ENV APPRISE_PLUGIN_PATHS=/plugin

WORKDIR /opt/apprise
EXPOSE 8000

# Note: distroless doesn't support shell scripts or nginx
# Run gunicorn directly since no supervisord available
ENTRYPOINT ["/opt/venv/bin/python"]
CMD ["-m", "gunicorn", "-c", "/opt/apprise/webapp/gunicorn.conf.py", "-b", "0.0.0.0:8000", "core.wsgi:application"]

# Alternative runtime stage with minimal debian
FROM python:3.12-slim AS runtime

# Install only runtime dependencies
RUN apt-get update -qq && \
    apt-get install -y -qq --no-install-recommends \
        nginx \
        curl \
        && apt-get clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/apt/archives/*

# Copy Python virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Make sure to use venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy our static content in place
COPY apprise_api/static /usr/share/nginx/html/s/

# set work directory
WORKDIR /opt/apprise

# Copy over Apprise API
COPY apprise_api/ webapp/

# Configuration Permissions (to run nginx as a non-root user)
RUN umask 0002 && \
    touch /etc/nginx/server-override.conf && \
    touch /etc/nginx/location-override.conf && \
    truncate --size 0 /var/log/*log

VOLUME /config
VOLUME /attach
VOLUME /plugin
EXPOSE 8000
CMD ["/opt/apprise/webapp/supervisord-startup"]

# API-only runtime stage - no nginx, no static files, no UI dependencies
FROM base AS api-only

# Install only minimal runtime dependencies
RUN apt-get update -qq && \
    apt-get install -y -qq --no-install-recommends \
        curl \
        && apt-get clean && \
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/apt/archives/*

# Copy Python virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Make sure to use venv
ENV PATH="/opt/venv/bin:$PATH"

# set work directory
WORKDIR /opt/apprise

# Copy over Apprise API (excluding static files and templates)
COPY apprise_api/ webapp/

# Remove UI components we don't need for API-only
RUN rm -rf webapp/static/ webapp/api/templates/ webapp/etc/nginx.conf webapp/etc/supervisord.conf

VOLUME /config
VOLUME /attach
VOLUME /plugin
EXPOSE 8000

# Run gunicorn directly without nginx or supervisord
CMD ["gunicorn", "-c", "/opt/apprise/webapp/gunicorn.conf.py", "-b", "0.0.0.0:8000", "core.wsgi:application"]

# Distroless API-only runtime stage - maximum security, minimal size, no UI
FROM gcr.io/distroless/python3:nonroot AS api-only-distroless

# Copy Python virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application (excluding UI components)
COPY --from=builder /tmp/webapp /opt/apprise/webapp/

# Make sure to use venv
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV APPRISE_CONFIG_DIR=/config
ENV APPRISE_ATTACH_DIR=/attach
ENV APPRISE_PLUGIN_PATHS=/plugin

WORKDIR /opt/apprise
EXPOSE 8000

# Note: distroless doesn't support shell, so we use Python executable directly
ENTRYPOINT ["/opt/venv/bin/python"]
CMD ["-m", "gunicorn", "-c", "/opt/apprise/webapp/gunicorn.conf.py", "-b", "0.0.0.0:8000", "core.wsgi:application"]

# Ultra-minimal Alpine-based API-only stage - alternative to distroless with fewer vulnerabilities
FROM python:3.12-alpine AS api-only-alpine

# Update packages and install essential runtime dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache curl && \
    addgroup -g 65532 -S nonroot && \
    adduser -u 65532 -S nonroot -G nonroot

# Copy Python virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application (excluding UI components)
COPY --from=builder /tmp/webapp /opt/apprise/webapp/

# Make sure to use venv
ENV PATH="/opt/venv/bin:$PATH"
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH="/opt/apprise/webapp"
ENV APPRISE_CONFIG_DIR=/config
ENV APPRISE_ATTACH_DIR=/attach
ENV APPRISE_PLUGIN_PATHS=/plugin

# Switch to non-root user
USER nonroot
WORKDIR /opt/apprise
EXPOSE 8000

# Run gunicorn directly (override gevent worker with sync for Alpine compatibility)
CMD ["gunicorn", "--worker-class", "sync", "--workers", "2", "--timeout", "300", "--bind", "0.0.0.0:8000", "--access-logfile", "-", "--error-logfile", "-", "core.wsgi:application"]
